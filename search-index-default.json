{"documents":[{"id":39,"pageTitle":"Conversational computing: a new programming model empower LLM applications","sectionTitle":"Conversational computing: a new programming model empower LLM applications","sectionRoute":"/blog/conversational-computing","type":"blog"},{"id":40,"pageTitle":"Conversational computing: a new programming model empower LLM applications","sectionTitle":"Citation","sectionRoute":"/blog/conversational-computing#citation","type":"blog"},{"id":41,"pageTitle":"Conversational computing: a new programming model empower LLM applications","sectionTitle":"References","sectionRoute":"/blog/conversational-computing#references","type":"blog"},{"id":5,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"Reality World 开源技术分享会","sectionRoute":"/blog/reality-world-open-source-conference","type":"blog"},{"id":6,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"先回答问题","sectionRoute":"/blog/reality-world-open-source-conference#先回答问题","type":"blog"},{"id":7,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"Reality World是什么？","sectionRoute":"/blog/reality-world-open-source-conference#reality-world是什么","type":"blog"},{"id":8,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"讲什么？","sectionRoute":"/blog/reality-world-open-source-conference#讲什么","type":"blog"},{"id":9,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"面向的受众群体是谁？","sectionRoute":"/blog/reality-world-open-source-conference#面向的受众群体是谁","type":"blog"},{"id":10,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"开源的目的是什么？","sectionRoute":"/blog/reality-world-open-source-conference#开源的目的是什么","type":"blog"},{"id":11,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"License","sectionRoute":"/blog/reality-world-open-source-conference#license","type":"blog"},{"id":12,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"开源什么？","sectionRoute":"/blog/reality-world-open-source-conference#开源什么","type":"blog"},{"id":13,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"开源信息","sectionRoute":"/blog/reality-world-open-source-conference#开源信息","type":"blog"},{"id":14,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"开源社区群","sectionRoute":"/blog/reality-world-open-source-conference#开源社区群","type":"blog"},{"id":15,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"活动信息","sectionRoute":"/blog/reality-world-open-source-conference#活动信息","type":"blog"},{"id":16,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"联系我","sectionRoute":"/blog/reality-world-open-source-conference#联系我","type":"blog"},{"id":17,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"官网地址","sectionRoute":"/blog/reality-world-open-source-conference#官网地址","type":"blog"},{"id":18,"pageTitle":"Reality World 开源技术分享会","sectionTitle":"报名地址","sectionRoute":"/blog/reality-world-open-source-conference#报名地址","type":"blog"},{"id":19,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"对未来数字世界和软件构造的思考","sectionRoute":"/blog/thinking","type":"blog"},{"id":20,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"Reality World不是什么？","sectionRoute":"/blog/thinking#reality-world不是什么","type":"blog"},{"id":21,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"Reality Create的核心不是一个游戏引擎！","sectionRoute":"/blog/thinking#reality-create的核心不是一个游戏引擎","type":"blog"},{"id":22,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"Reality World当然也不是元宇宙项目","sectionRoute":"/blog/thinking#reality-world当然也不是元宇宙项目","type":"blog"},{"id":23,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"构建一个互操作的数字世界","sectionRoute":"/blog/thinking#构建一个互操作的数字世界","type":"blog"},{"id":24,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"更轻量级的隔离技术","sectionRoute":"/blog/thinking#更轻量级的隔离技术","type":"blog"},{"id":25,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"互操作性的本质是应用碎片化的问题","sectionRoute":"/blog/thinking#互操作性的本质是应用碎片化的问题","type":"blog"},{"id":26,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"新的应用程序构造方法","sectionRoute":"/blog/thinking#新的应用程序构造方法","type":"blog"},{"id":27,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"面向对象的本质是隔离","sectionRoute":"/blog/thinking#面向对象的本质是隔离","type":"blog"},{"id":28,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"程序结构的复杂性","sectionRoute":"/blog/thinking#程序结构的复杂性","type":"blog"},{"id":29,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"去中心化的数据管理","sectionRoute":"/blog/thinking#去中心化的数据管理","type":"blog"},{"id":30,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"为AI而生的应用程序构造方法","sectionRoute":"/blog/thinking#为ai而生的应用程序构造方法","type":"blog"},{"id":31,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"软件复用与可组合性","sectionRoute":"/blog/thinking#软件复用与可组合性","type":"blog"},{"id":32,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"面向AI的编程系统","sectionRoute":"/blog/thinking#面向ai的编程系统","type":"blog"},{"id":33,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"拥抱Rust","sectionRoute":"/blog/thinking#拥抱rust","type":"blog"},{"id":34,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"我这一年的创作过程","sectionRoute":"/blog/thinking#我这一年的创作过程","type":"blog"},{"id":35,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"关于商业模式","sectionRoute":"/blog/thinking#关于商业模式","type":"blog"},{"id":36,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"参与Reality World开发","sectionRoute":"/blog/thinking#参与reality-world开发","type":"blog"},{"id":37,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"关于融资","sectionRoute":"/blog/thinking#关于融资","type":"blog"},{"id":38,"pageTitle":"对未来数字世界和软件构造的思考","sectionTitle":"后记","sectionRoute":"/blog/thinking#后记","type":"blog"},{"id":1,"pageTitle":"","sectionTitle":"开源背景","sectionRoute":"/community/about-open-source#开源背景","type":"docs"},{"id":2,"pageTitle":"","sectionTitle":"开源目的","sectionRoute":"/community/about-open-source#开源目的","type":"docs"},{"id":3,"pageTitle":"","sectionTitle":"License","sectionRoute":"/community/about-open-source#license","type":"docs"},{"id":4,"pageTitle":"","sectionTitle":"特别说明","sectionRoute":"/community/about-open-source#特别说明","type":"docs"}],"index":{"version":"2.3.9","fields":["title","content","tags"],"fieldVectors":[["title/39",[0,0.931,1,0.931,2,0.931,3,0.737,4,0.931,5,0.931,6,0.82,7,0.82]],["content/39",[]],["tags/39",[8,0.34,9,0.386]],["title/40",[10,3.72]],["content/40",[0,2.293,1,3.349,2,2.293,3,1.815,4,2.293,5,2.293,6,2.02,7,2.02,11,1.661,12,2.708,13,2.708,14,2.708,15,2.708,16,0.406,17,0.507,18,2.708,19,1.661,20,1.661,21,0.338,22,1.661,23,1.661,24,1.661,25,1.661,26,1.661]],["tags/40",[]],["title/41",[27,3.72]],["content/41",[]],["tags/41",[]],["title/5",[16,0.331,17,0.415,21,0.152]],["content/5",[21,0.431]],["tags/5",[8,0.34,28,0.456]],["title/6",[21,0.255]],["content/6",[16,0.831,17,0.927,21,0.256,29,3.736,30,3.736,31,3.736,32,3.163]],["tags/6",[]],["title/7",[16,0.416,17,0.52]],["content/7",[9,2.148,16,0.746,17,0.475,21,0.365,33,2.537,34,1.548,35,2.537,36,2.537,37,2.537,38,2.537,39,2.537,40,2.537,41,2.537,42,2.537,43,2.148,44,1.548,45,2.537]],["tags/7",[]],["title/8",[21,0.255]],["content/8",[16,0.713,17,0.661,21,0.42,46,2.324,47,2.324,48,2.324,49,2.324,50,2.324,51,2.324,52,2.324,53,1.733,54,2.324,55,2.324,56,2.324]],["tags/8",[]],["title/9",[21,0.255]],["content/9",[6,2.083,21,0.447,34,1.704,53,2.083,57,2.793,58,2.365,59,2.793,60,2.083]],["tags/9",[]],["title/10",[21,0.255]],["content/10",[16,0.741,17,1.04,21,0.256,34,2.279,61,3.736,62,3.163,63,3.736]],["tags/10",[]],["title/11",[64,2.774]],["content/11",[16,0.701,64,3.493,65,4.684,66,4.684]],["tags/11",[]],["title/12",[21,0.255]],["content/12",[16,0.647,17,0.809,21,0.373,62,3.657,67,3.657]],["tags/12",[]],["title/13",[21,0.255]],["content/13",[21,0.351,68,5.118]],["tags/13",[]],["title/14",[21,0.255]],["content/14",[69,4.001]],["tags/14",[]],["title/15",[21,0.255]],["content/15",[21,0.414,67,2.49,70,2.941,71,2.941,72,2.941,73,2.941,74,2.941,75,4.895,76,2.941,77,2.941]],["tags/15",[]],["title/16",[21,0.255]],["content/16",[16,0.622,17,0.779,21,0.285,32,3.519,69,3.1,78,4.156,79,4.156]],["tags/16",[]],["title/17",[21,0.255]],["content/17",[80,5.366]],["tags/17",[]],["title/18",[21,0.255]],["content/18",[81,5.366]],["tags/18",[]],["title/19",[21,0.255]],["content/19",[16,0.776,17,0.97,44,2.444,82,4.006,83,4.006,84,4.006]],["tags/19",[8,0.63]],["title/20",[16,0.416,17,0.52]],["content/20",[16,0.732,43,4.141,85,4.891]],["tags/20",[]],["title/21",[16,0.416,44,1.693]],["content/21",[16,0.559,17,0.7,21,0.339,44,2.279,86,3.736,87,3.736,88,3.736,89,3.736,90,3.736]],["tags/21",[]],["title/22",[16,0.416,17,0.52]],["content/22",[7,2.253,16,0.452,17,0.566,21,0.293,91,3.022,92,3.022,93,3.022,94,3.022,95,3.022,96,3.623,97,3.191,98,3.022,99,2.558,100,3.022]],["tags/22",[]],["title/23",[21,0.255]],["content/23",[3,0.73,16,0.451,17,0.564,21,0.207,34,0.664,53,0.812,96,1.605,97,1.878,101,1.089,102,1.089,103,1.089,104,1.089,105,1.089,106,1.089,107,1.089,108,1.089,109,1.089,110,1.089,111,1.089,112,1.089,113,1.089,114,1.089,115,1.089,116,1.089,117,1.089,118,1.089,119,1.089,120,1.089,121,1.089,122,1.089,123,1.089,124,1.089,125,1.089,126,1.089,127,1.089,128,1.089,129,1.089,130,1.089,131,1.605,132,1.089,133,1.089,134,1.089,135,1.089,136,1.089,137,1.089,138,1.089,139,1.089,140,1.089,141,1.896,142,1.089,143,1.089,144,0.922,145,1.089,146,1.089,147,1.089,148,1.089,149,1.089,150,1.089,151,1.089,152,1.089,153,1.089,154,1.089,155,1.089,156,1.089,157,1.089,158,1.089,159,1.089,160,1.089]],["tags/23",[]],["title/24",[21,0.255]],["content/24",[17,0.809,34,2.635,44,2.635,161,4.319,162,4.319,163,4.319]],["tags/24",[]],["title/25",[21,0.255]],["content/25",[16,0.363,17,0.341,21,0.386,58,0.879,97,0.774,99,0.879,164,1.038,165,1.038,166,1.038,167,1.038,168,1.038,169,1.038,170,1.038,171,1.038,172,1.818,173,1.038,174,1.038,175,3.646,176,1.038,177,1.038,178,1.038,179,3.313,180,1.818,181,0.879,182,1.038,183,1.818,184,1.038,185,1.818,186,1.54,187,1.038,188,1.038,189,1.038,190,1.038,191,1.818,192,1.038,193,1.038,194,1.818,195,1.038,196,1.038,197,1.54,198,1.038,199,1.038,200,1.038,201,1.038,202,1.038,203,1.038,204,1.038,205,1.038]],["tags/25",[]],["title/26",[21,0.255]],["content/26",[16,0.776,17,0.75,21,0.416,206,4.006]],["tags/26",[]],["title/27",[21,0.255]],["content/27",[3,1.171,21,0.193,131,1.479,144,0.839,181,0.839,186,1.479,197,0.839,207,0.991,208,1.747,209,1.747,210,0.991,211,0.991,212,0.991,213,0.991,214,1.747,215,0.991,216,0.991,217,1.747,218,0.991,219,0.991,220,1.747,221,0.991,222,1.747,223,0.991,224,3.549,225,2.389,226,0.991,227,0.991,228,3.549,229,3.549,230,0.991,231,0.991,232,0.991,233,0.991,234,0.991,235,1.747,236,0.991,237,0.991,238,0.991,239,0.991,240,0.991,241,0.991,242,0.991,243,0.991,244,0.991,245,0.991,246,0.991,247,0.991,248,0.991,249,0.991,250,0.991,251,0.991,252,0.991,253,0.991,254,0.991,255,0.991,256,0.991,257,0.991,258,0.991,259,0.991,260,0.991]],["tags/27",[]],["title/28",[21,0.255]],["content/28",[16,0.622,17,0.779,21,0.422,261,4.156]],["tags/28",[]],["title/29",[21,0.255]],["content/29",[21,0.415,262,4.494,263,4.494]],["tags/29",[]],["title/30",[264,3.149]],["content/30",[16,0.647,17,0.809,21,0.296,265,4.319,266,4.319,267,4.319]],["tags/30",[]],["title/31",[21,0.255]],["content/31",[16,0.541,21,0.374,268,3.614,269,3.614,270,3.614,271,3.614,272,3.614,273,3.614,274,3.06]],["tags/31",[]],["title/32",[264,3.149]],["content/32",[275,4.494,276,4.494,277,4.494,278,4.494,279,4.494]],["tags/32",[]],["title/33",[60,2.774]],["content/33",[60,3.221,280,4.319,281,4.319,282,4.319,283,4.319,284,4.319]],["tags/33",[]],["title/34",[21,0.255]],["content/34",[225,3.273,285,3.866,286,3.866,287,3.866,288,3.866,289,3.866,290,3.866,291,3.866,292,3.866]],["tags/34",[]],["title/35",[21,0.255]],["content/35",[21,0.368]],["tags/35",[]],["title/36",[16,0.416,17,0.52]],["content/36",[16,0.856,17,0.877,293,4.684]],["tags/36",[]],["title/37",[21,0.255]],["content/37",[21,0.335,69,3.648,274,4.141]],["tags/37",[]],["title/38",[21,0.255]],["content/38",[21,0.368]],["tags/38",[]],["title/1",[21,0.255]],["content/1",[21,0.368]],["tags/1",[]],["title/2",[21,0.255]],["content/2",[21,0.368]],["tags/2",[]],["title/3",[64,2.774]],["content/3",[21,0.368]],["tags/3",[]],["title/4",[21,0.255]],["content/4",[21,0.368]],["tags/4",[]]],"invertedIndex":[["",{"_index":21,"title":{"1":{},"2":{},"4":{},"5":{},"6":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"34":{},"35":{},"37":{},"38":{}},"content":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"15":{},"16":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"35":{},"37":{},"38":{},"40":{}},"tags":{}}],["0.5",{"_index":55,"title":{},"content":{"8":{}},"tags":{}}],["00",{"_index":75,"title":{},"content":{"15":{}},"tags":{}}],["10",{"_index":62,"title":{},"content":{"10":{},"12":{}},"tags":{}}],["10的图书榜单，编程相关的是：《编译原理》、《erlang程序设计（第2版）》、《编程语言实现模式》、《游戏机制》、《链接器与加载器》、《data",{"_index":289,"title":{},"content":{"34":{}},"tags":{}}],["1189",{"_index":71,"title":{},"content":{"15":{}},"tags":{}}],["13",{"_index":73,"title":{},"content":{"15":{}},"tags":{}}],["14",{"_index":74,"title":{},"content":{"15":{}},"tags":{}}],["17",{"_index":76,"title":{},"content":{"15":{}},"tags":{}}],["18",{"_index":77,"title":{},"content":{"15":{}},"tags":{}}],["20",{"_index":67,"title":{},"content":{"12":{},"15":{}},"tags":{}}],["2018年的全国图形渲染技术巡讲，一个人围绕一个主题讲3～4个小时，在中国这种会议几乎是绝无仅有的，那种系统和深度远不是那种15～45",{"_index":30,"title":{},"content":{"6":{}},"tags":{}}],["2022年4.30日从华为离职并开始研究和设计realiti",{"_index":266,"title":{},"content":{"30":{}},"tags":{}}],["2022年4.30日从华为离职，几乎整整一年时间全部都在思考整个系统的设计，以及后期的开发。刚开始2",{"_index":285,"title":{},"content":{"34":{}},"tags":{}}],["2023",{"_index":15,"title":{},"content":{"40":{}},"tags":{}}],["2023.10.22",{"_index":70,"title":{},"content":{"15":{}},"tags":{}}],["3",{"_index":32,"title":{},"content":{"6":{},"16":{}},"tags":{}}],["3.0、元宇宙、以及大模型ai应用的持续不断出现，人们对未来数字化的预期会越来越大，未来的数字化形态必然会发生一些变化。但是目前很多因素糅合在一起使得我们很难去看到清楚的路径，这里面必然涉及到底层技术以及上层产品形态的相互驱动及进化，任何单一实体可能都很难从这种耦合中看到清晰的逻辑。所以real",{"_index":63,"title":{},"content":{"10":{}},"tags":{}}],["3.0和元宇宙的出现，这两种新的应用形态似乎都在尝试构建一个共享、互操作的数字世界。这要求应用之间需要高度交互能力，然而这种需求和传统的软件构造方法是天生相悖的，传统软件构造方法建立内存隔离的目的就是保护数据和内存中数据的安全，它的一个基本的安全底座就是系统的内存环境会保护程序内所有的数据，因此传统的编程语言和软件构造方法就没有太多专门针对这些数据的保护措施，但是当我们去掉这个内存保护，要求很多匿名的软件在一个内存环境中进行运行的时候，这种安全性怎么保证。虽然web",{"_index":52,"title":{},"content":{"8":{}},"tags":{}}],["3.0（去中心化）。尽管这三者之间的概念以及技术需求都是很模糊的，我们则尝试在这三者之间寻找一种统一的计算架构和软件构造方法。所以这就是realiti",{"_index":35,"title":{},"content":{"7":{}},"tags":{}}],["3d引擎的能力以使用户可以开发3d应用程序，但这部分技术跟传统的游戏引擎使用的技术不会有太大差异，当然因为运行时环境不同，与之相关的3d引擎的架构和流程肯定会有一些变化，所以我预期将来realiti",{"_index":88,"title":{},"content":{"21":{}},"tags":{}}],["3d渲染，realiti",{"_index":89,"title":{},"content":{"21":{}},"tags":{}}],["3d，然后期望人们有些更多沉浸式的虚拟生活。这在某种程度上说跟realiti",{"_index":91,"title":{},"content":{"22":{}},"tags":{}}],["3~4",{"_index":47,"title":{},"content":{"8":{}},"tags":{}}],["3部分讨论的内容。然而比较巧合和惊讶的是，至少从我们的设计思路上看：让普通人会编写代码与让ai",{"_index":268,"title":{},"content":{"31":{}},"tags":{}}],["40",{"_index":48,"title":{},"content":{"8":{}},"tags":{}}],["40%的内容中为什么要这么设计的问题。过去几十年来应用构造的体系基本上都是围绕构建一个单一的程序体被隔离在单一的内存中运行的，在这种背景下，软件之间的功能通常都是相互隔离的，甚至即使是属于同一个用户不同应用之间的数据，虽然看起来都是同一个用户的数据，但是不同的软件之间却无法访问。这种机制在过去几十年都能够很好地解决我们的数字化的问题，直到web",{"_index":51,"title":{},"content":{"8":{}},"tags":{}}],["5",{"_index":61,"title":{},"content":{"10":{}},"tags":{}}],["50",{"_index":286,"title":{},"content":{"34":{}},"tags":{}}],["60",{"_index":49,"title":{},"content":{"8":{}},"tags":{}}],["7月左右，那个时候我的基本架构的构思已经初步完成，尤其是最核心也是最重要的一步基础已经设计好，当时看到这篇演讲感到很多共鸣，也是对自己的一种很大的激励，毕竟有对技术和行业都有非常经验和影响力的大佬也有类似的思考和行动。但从去年到现在，我们还是沿着我们早先的技术思路，基本上并没有去关注和参考太多epic",{"_index":104,"title":{},"content":{"23":{}},"tags":{}}],["ai",{"_index":264,"title":{"30":{},"32":{}},"content":{},"tags":{}}],["ai到底能不能或者什么时候替代程序员，我们回到问题本身。传统的文本合成，计算的是文字与文字之间，句子与句子之间的组合概率，这里有两个事情值得注意：第一是任何字之间都可以组合，所以chatgpt总是可以给我们答案，哪怕其中的句子组合和逻辑是完全错误的；第二是一般常用于表述正确语法和语义的哪些文字信息是非常多的，也就是说chatgpt",{"_index":270,"title":{},"content":{"31":{}},"tags":{}}],["ai去生成程序，这里ai",{"_index":273,"title":{},"content":{"31":{}},"tags":{}}],["ai构造复杂的程序逻辑相比，更好的使用方式可能是autogpt或者openai的插件系统，在这种架构中，ai",{"_index":275,"title":{},"content":{"32":{}},"tags":{}}],["ai能够生成代码，这件事情肯定是非常复杂的，当然由于chatgpt的出现相信现在大部分程序员都能够感受到ai的代码生成能力，有些人比较坚信ai",{"_index":269,"title":{},"content":{"31":{}},"tags":{}}],["alan",{"_index":217,"title":{},"content":{"27":{}},"tags":{}}],["alway",{"_index":240,"title":{},"content":{"27":{}},"tags":{}}],["api从哪里获取等等，这远远超出简单文字合成的范围。你可以合成一个文本组合的源代码结果，但是其中的逻辑可能完全是错误的，函数是不存在的，参数是错误的。因此目前来讲，大部分ai",{"_index":271,"title":{},"content":{"31":{}},"tags":{}}],["api包装使用某种形式的标准包装成外部接口，这样就造成碎片化，因为即使是针对同样的一类逻辑和数据，不同的应用程序或服务往往会定义不同的数据结构或处理逻辑，这就形成api的碎片化，使得相互之间非常难以协作。试想你可以在两个应用之间协商修改各自的api",{"_index":168,"title":{},"content":{"25":{}},"tags":{}}],["api碎片化的第二个例子是llvm，本质上llvm在编译器领域的创新主要做的是模块化，早期的编译器开发，各个前端都要分别集成各个后端，编译器开发的复杂度非常高，这里面其实就是多对多的问题，看似很简单，每个前端与每个后端分别调一调，但随之代码的管理和维护成本是很高的，有时候某些内部设计不一致就会导致大量的重复，这就是碎片化问题。由内而外的设计总是不可避免会导致碎片化，碎片化带来软件复杂度，管理和研发成本。当llvm提供了一个统一的低层ir表述之后，编译器的复杂度大大降低，比如现在能够很轻易地开发一些dsl语言，因为你完全不需要操心后端，只需要把你的代码生成llvm",{"_index":171,"title":{},"content":{"25":{}},"tags":{}}],["app",{"_index":110,"title":{},"content":{"23":{}},"tags":{}}],["applic",{"_index":7,"title":{"39":{}},"content":{"22":{},"40":{}},"tags":{}}],["arealityworld",{"_index":69,"title":{},"content":{"14":{},"16":{},"37":{}},"tags":{}}],["armstrong",{"_index":214,"title":{},"content":{"27":{}},"tags":{}}],["armstrong的一段采访：ralph",{"_index":211,"title":{},"content":{"27":{}},"tags":{}}],["armstrong觉得oo编程很烂？，其中引用到erlang之父jo",{"_index":210,"title":{},"content":{"27":{}},"tags":{}}],["armstrong说，根据alan",{"_index":247,"title":{},"content":{"27":{}},"tags":{}}],["article{qin2023convers",{"_index":19,"title":{},"content":{"40":{}},"tags":{}}],["assembl",{"_index":53,"title":{},"content":{"8":{},"9":{},"23":{}},"tags":{}}],["assembly、machinations、《堡垒之夜》、snapchat、bevi",{"_index":292,"title":{},"content":{"34":{}},"tags":{}}],["assembly之前还没有一种技术可以很好地普及和运用沙盒技术，例如jvm上有一些方案，但大多有些性能问题，或者不能完全保证安全，或者方案比较重。web",{"_index":127,"title":{},"content":{"23":{}},"tags":{}}],["assembly之所以是一种未来非常有潜力的技术，不仅仅得益于对web的友好，接近机器码的字节码，多语言支持等等，这种沙盒技术也是很大的一个技术点。在web",{"_index":126,"title":{},"content":{"23":{}},"tags":{}}],["assembly就使用另一个思路，由于web",{"_index":119,"title":{},"content":{"23":{}},"tags":{}}],["assembly有机会对程序进行一定的分析，通过基于control",{"_index":121,"title":{},"content":{"23":{}},"tags":{}}],["assembly的编译器可以检查出程序中哪些代码可能会对这种沙盒环境造成破坏，从而禁止这样的代码生成合法的wasm",{"_index":125,"title":{},"content":{"23":{}},"tags":{}}],["assembly的隔离技术非常优异，但是它并没有改变程序本身的构造方式，即如果你的代码本身就不含破坏别人的恶意代码，那么其实你的开发过程与过去的方式并没有什么区别。而r",{"_index":161,"title":{},"content":{"24":{}},"tags":{}}],["assembly程序都会编译为wasm文件，由wasm虚拟机解释执行，而不是底层的二进制代码，所以web",{"_index":120,"title":{},"content":{"23":{}},"tags":{}}],["assembly这种优秀的沙盒技术使得沙盒模式在以后的软件构造中可能被大规模使用，也就会实现更多的软件协作与分工，事实上比如现在对未受信任多应用环境要求比较高的环境如区块链就大多转型web",{"_index":128,"title":{},"content":{"23":{}},"tags":{}}],["assembly，而如docker和severless这种对虚拟环境要求比较高的环境也在逐步转向web",{"_index":129,"title":{},"content":{"23":{}},"tags":{}}],["author",{"_index":22,"title":{},"content":{"40":{}},"tags":{}}],["a开发了某个应用给用户新增了一种新的健康类的数据信息，这个数据本来是属于用户的，这个时候用户想要用这个数据来实现另一个事情，ta想自己或者说让其他开发者b帮助开发一个应用来使用这些数据，这种情况下通常是做不到的，因为开发者a可能并没有太多动力去提供这个接口，因为ta可能要耗费很大的精力，除非平台提供一些这种非常便利的机制使得ta",{"_index":167,"title":{},"content":{"25":{}},"tags":{}}],["back",{"_index":244,"title":{},"content":{"27":{}},"tags":{}}],["base",{"_index":112,"title":{},"content":{"23":{}},"tags":{}}],["bit",{"_index":255,"title":{},"content":{"27":{}},"tags":{}}],["bug",{"_index":108,"title":{},"content":{"23":{}},"tags":{}}],["c",{"_index":185,"title":{},"content":{"25":{}},"tags":{}}],["c#、c、c++、ruby、lua、rust",{"_index":207,"title":{},"content":{"27":{}},"tags":{}}],["c++/c进行开发，进行了一些简单的语言包装和编译流程定制。因为我们2号员工一直是rust爱好者，一直在鼓动我使用rust，虽然之前看过rust的一些介绍，但是感觉还是没有特别的动力去完全切换到rust",{"_index":280,"title":{},"content":{"33":{}},"tags":{}}],["c++中也经常会存在对象复制；再有稍微复杂一点就是使用move，先将数据mov",{"_index":284,"title":{},"content":{"33":{}},"tags":{}}],["c++那样到处是相互引用显然几乎肯定是你完全没法通过编译器，你得设计好整个程序对象的结构，这里推荐bevi",{"_index":283,"title":{},"content":{"33":{}},"tags":{}}],["call",{"_index":162,"title":{},"content":{"24":{}},"tags":{}}],["capabl",{"_index":149,"title":{},"content":{"23":{}},"tags":{}}],["cfi)技术，web",{"_index":124,"title":{},"content":{"23":{}},"tags":{}}],["characterist",{"_index":140,"title":{},"content":{"23":{}},"tags":{}}],["chatgpt",{"_index":274,"title":{},"content":{"31":{},"37":{}},"tags":{}}],["chatgpt席卷了整个世界，或者至少是科技圈，不管是从资本，国企，民企，程序员个人等等都是受到很大的影响，当然也有像我们小孩的妈妈，以及他妈妈的朋友，目前还不太了解chatgpt",{"_index":265,"title":{},"content":{"30":{}},"tags":{}}],["chunlin",{"_index":13,"title":{},"content":{"40":{}},"tags":{}}],["citat",{"_index":10,"title":{"40":{}},"content":{},"tags":{}}],["cite",{"_index":11,"title":{},"content":{"40":{}},"tags":{}}],["class",{"_index":186,"title":{},"content":{"25":{},"27":{}},"tags":{}}],["client",{"_index":115,"title":{},"content":{"23":{}},"tags":{}}],["co",{"_index":37,"title":{},"content":{"7":{}},"tags":{}}],["cocos2d",{"_index":78,"title":{},"content":{"16":{}},"tags":{}}],["cogin",{"_index":9,"title":{},"content":{"7":{}},"tags":{"39":{}}}],["common",{"_index":156,"title":{},"content":{"23":{}},"tags":{}}],["commondata",{"_index":146,"title":{},"content":{"23":{}},"tags":{}}],["commun",{"_index":150,"title":{},"content":{"23":{}},"tags":{}}],["complet",{"_index":226,"title":{},"content":{"27":{}},"tags":{}}],["complex",{"_index":38,"title":{},"content":{"7":{}},"tags":{}}],["compos",{"_index":100,"title":{},"content":{"22":{}},"tags":{}}],["comput",{"_index":1,"title":{"39":{}},"content":{"40":{}},"tags":{}}],["computing，或者convers",{"_index":40,"title":{},"content":{"7":{}},"tags":{}}],["computing，这些术语都是cogin",{"_index":41,"title":{},"content":{"7":{}},"tags":{}}],["context",{"_index":194,"title":{},"content":{"25":{}},"tags":{}}],["convention）来设计隔离机制，这样使得不需要对用户的开发过程造成太大的影响。在r",{"_index":163,"title":{},"content":{"24":{}},"tags":{}}],["convers",{"_index":0,"title":{"39":{}},"content":{"40":{}},"tags":{}}],["cppnamespac",{"_index":189,"title":{},"content":{"25":{}},"tags":{}}],["creat",{"_index":44,"title":{"21":{}},"content":{"7":{},"19":{},"21":{},"24":{}},"tags":{}}],["create也包含的3d支持，在我与投资人或者其他朋友交流的过程中，大家普遍的印象是这是一个新的游戏引擎，所以大家的思路就是你跟unity，unr",{"_index":85,"title":{},"content":{"20":{}},"tags":{}}],["create的计划也可以开发2d应用程序，所以我们是用一种统一的编程语言和运行时环境，来统一3d和传统2d",{"_index":90,"title":{},"content":{"21":{}},"tags":{}}],["creativ",{"_index":107,"title":{},"content":{"23":{}},"tags":{}}],["c接口实现相互调用，再往上一点，任何程序之间传递字符串然后内部进行格式解释，也仍然是能够进行通信的。实际上互联网的机制就是如此，osi（open",{"_index":164,"title":{},"content":{"25":{}},"tags":{}}],["data",{"_index":157,"title":{},"content":{"23":{}},"tags":{}}],["def",{"_index":176,"title":{},"content":{"25":{}},"tags":{}}],["definit",{"_index":187,"title":{},"content":{"25":{}},"tags":{}}],["descript",{"_index":180,"title":{},"content":{"25":{}},"tags":{}}],["design",{"_index":290,"title":{},"content":{"34":{}},"tags":{}}],["dialect",{"_index":175,"title":{},"content":{"25":{}},"tags":{}}],["each",{"_index":151,"title":{},"content":{"23":{}},"tags":{}}],["ecs/dot",{"_index":57,"title":{},"content":{"9":{}},"tags":{}}],["emphas",{"_index":234,"title":{},"content":{"27":{}},"tags":{}}],["empow",{"_index":5,"title":{"39":{}},"content":{"40":{}},"tags":{}}],["engin",{"_index":43,"title":{},"content":{"7":{},"20":{}},"tags":{}}],["engine去创作，这个模式其实类似roblox的模式，它也是一种游戏引擎这种商业模式的转型：传统的游戏引擎只是一个单机的生成应用程序的软件，开发者开发的内容由自己去分发和运营，这样游戏引擎仅作为一个工具，它只参与程序的开发，而无法参与分发和运营，因此无法形成生态，所以尽管一些引擎有庞大的开发者数量和群体，但是这种数量并没有很有效的方式可以转化为生态。然而roblox和《堡垒之夜》是一个分布式系统，你的内容必须分发到这个分布式系统中并由特定的客户端运行时环境来运行，而无法像单独的游戏引擎那样自行分发和运营，这样roblox",{"_index":106,"title":{},"content":{"23":{}},"tags":{}}],["engine开发脚本语言的团队skookumscript，据说还有写v8",{"_index":138,"title":{},"content":{"23":{}},"tags":{}}],["engine的c++或者blueprint开发的应用程序在《堡垒之夜》内存环境中运行，unr",{"_index":133,"title":{},"content":{"23":{}},"tags":{}}],["engine目前也没有比较成熟的脚本编程语言方案，因此epic需要开发一套新的脚本语言，这就是今年早些时候发布的vers",{"_index":134,"title":{},"content":{"23":{}},"tags":{}}],["epic推出vers",{"_index":130,"title":{},"content":{"23":{}},"tags":{}}],["epic显然不可能让玩家使用unr",{"_index":132,"title":{},"content":{"23":{}},"tags":{}}],["erlang",{"_index":208,"title":{},"content":{"27":{}},"tags":{}}],["erlang、usd、llvm、mlir、ecs、web",{"_index":291,"title":{},"content":{"34":{}},"tags":{}}],["erlang之父jo",{"_index":209,"title":{},"content":{"27":{}},"tags":{}}],["erlang就采用了一种不同的机制，它从语言体系上就不允许对象之间能够直接访问内部数据或方法，每个函数都分配为独立的线程，线程之间只能通过消息进行传递和联系，这样程序员就很难写出耦合比较深的代码，同时这种隔离对并行计算和分布式也带来了好处。所以jo",{"_index":246,"title":{},"content":{"27":{}},"tags":{}}],["erlang的整个架构设计，这也是为什么erlang",{"_index":258,"title":{},"content":{"27":{}},"tags":{}}],["erlang看起来是一种完美的架构，然而消息通信是一种操作起来不太便利的方式，比如为了进一步解耦它通常是传递字符串消息，字符串需要编解码，带来了性能问题；而另一方面消息编程模型通常是异步的，使得对逻辑的流程管理失去了控制力。r",{"_index":259,"title":{},"content":{"27":{}},"tags":{}}],["evolv",{"_index":95,"title":{},"content":{"22":{}},"tags":{}}],["exampl",{"_index":155,"title":{},"content":{"23":{}},"tags":{}}],["exhibitsyntact",{"_index":152,"title":{},"content":{"23":{}},"tags":{}}],["famou",{"_index":221,"title":{},"content":{"27":{}},"tags":{}}],["fault",{"_index":113,"title":{},"content":{"23":{}},"tags":{}}],["flow",{"_index":122,"title":{},"content":{"23":{}},"tags":{}}],["format",{"_index":158,"title":{},"content":{"23":{}},"tags":{}}],["formatsandcommun",{"_index":147,"title":{},"content":{"23":{}},"tags":{}}],["getdialectnamespac",{"_index":200,"title":{},"content":{"25":{}},"tags":{}}],["gine",{"_index":42,"title":{},"content":{"7":{}},"tags":{}}],["graphql",{"_index":263,"title":{},"content":{"29":{}},"tags":{}}],["grapql",{"_index":262,"title":{},"content":{"29":{}},"tags":{}}],["himself",{"_index":219,"title":{},"content":{"27":{}},"tags":{}}],["html、xml、sql、usd等等，比如nvidia就基于usd构建了omniverse，由于其对usd格式的良好支持，使得其可以兼容大部分的内容制作工具，就构建起一个以omnivers",{"_index":166,"title":{},"content":{"25":{}},"tags":{}}],["https://9371398676573.huodongxing.com/event/1723877940100",{"_index":81,"title":{},"content":{"18":{}},"tags":{}}],["https://github.com/cogine/realityworld",{"_index":68,"title":{},"content":{"13":{}},"tags":{}}],["https://realityworld.com",{"_index":80,"title":{},"content":{"17":{}},"tags":{}}],["https://realityworld.com/blog/convers",{"_index":18,"title":{},"content":{"40":{}},"tags":{}}],["initi",{"_index":197,"title":{},"content":{"25":{},"27":{}},"tags":{}}],["integr",{"_index":123,"title":{},"content":{"23":{}},"tags":{}}],["interconnect",{"_index":165,"title":{},"content":{"25":{}},"tags":{}}],["interoper",{"_index":96,"title":{},"content":{"22":{},"23":{}},"tags":{}}],["iphone的备忘录app记录一些想法，这种方式比较方便，任何时候想到一点东西就可以记下来，很多时候晚上半夜都会起来记录，确实有些东西很快就是可以忘记的。后来体系比较完整的时候我逐步将这些信息整理到markdown中，并逐步积累，现在整个系统的设计和思考已经超过22万字，整整400",{"_index":287,"title":{},"content":{"34":{}},"tags":{}}],["ir",{"_index":172,"title":{},"content":{"25":{}},"tags":{}}],["ir就可以能够被轻易组合使用，你可以选择社区各种丰富的模块进行组合，来生成特定的编译流程，所以mlir又称作“生成编译器的编译器”。实际上，碎片化在工业界是一个很大的问题，每家公司在开发自己的软件的时候不会考虑那么多，觉得我只要投入研发资源把自己软件做好就行，但是真正在用户侧使用的时候，ta可能需要多个软件是可以相互协作的，甚至你的用户可能就是开发者，这个开发者可能希望不同的软件可以被更高效的集成和管理。llvm的作者chri",{"_index":203,"title":{},"content":{"25":{}},"tags":{}}],["ir更上层的抽象，所以我们对多层级ir表述又有了需求，于是在llvm的基础上又发展出mlir，它允许开发者社区能够自定义ir。然而与usd的schema非常相似的地方是，mlir为了避免碎片化，使不同开发者自定义的ir之间能够更轻易的协作，它也提供了一种类似的代码生成机制，在mlir中称为dialect",{"_index":174,"title":{},"content":{"25":{}},"tags":{}}],["isol",{"_index":249,"title":{},"content":{"27":{}},"tags":{}}],["isolation，sfi）技术，相对应操作系统或硬件的内存隔离，sfi是用于构建包含未信任组件的安全系统的一种轻量级方法，能够用于减少由于内存安全bug导致的攻击，sfi通过严格将第三方未信任软件限制在自己的沙盒内存区域，来隔离这种内存安全导致的破坏。用例包括浏览器使用sfi来扩展第三方组件，例如经典的n",{"_index":114,"title":{},"content":{"23":{}},"tags":{}}],["it'",{"_index":228,"title":{},"content":{"27":{}},"tags":{}}],["joe",{"_index":213,"title":{},"content":{"27":{}},"tags":{}}],["johnson",{"_index":212,"title":{},"content":{"27":{}},"tags":{}}],["jones，以及之前收购的一个为unr",{"_index":137,"title":{},"content":{"23":{}},"tags":{}}],["journal",{"_index":23,"title":{},"content":{"40":{}},"tags":{}}],["kay",{"_index":218,"title":{},"content":{"27":{}},"tags":{}}],["kay的描述，erlang",{"_index":248,"title":{},"content":{"27":{}},"tags":{}}],["kay认为oop的核心是关于消息，但是这样说其实我个人觉得并不太好理解到本质，因为消息更像是oop这种设计下的一种机制或结果，而不是oop本身的定义。我觉得oop的本质应该是隔离，只有做到真正的隔离，才能真正降低系统的复杂度，因为绝对的隔离使得你完全不需要也不能了解另一个物体内部的运作，你们只需要通过一些外在的属性进行交互，我们的开发也仅需要了解这些简单的外在属性。现代大部分编程语言更强调的是object和class",{"_index":245,"title":{},"content":{"27":{}},"tags":{}}],["languag",{"_index":131,"title":{},"content":{"23":{},"27":{}},"tags":{}}],["language。epic为此挖来了haskell的作者simon",{"_index":135,"title":{},"content":{"23":{}},"tags":{}}],["lattner最新的创业公司modular实际上核心就是解决这个问题，他的新编程语言mojo，除了一些语法层面的传统一点的东西，很多核心能力都是来源于底层的mlir，其中mlir跟mojo有更深度的整合，使得mojo具有很强的元编程能力。modular的最核心的逻辑其实跟当年的llvm类似，解决碎片化问题，当然modular",{"_index":204,"title":{},"content":{"25":{}},"tags":{}}],["licens",{"_index":64,"title":{"3":{},"11":{}},"content":{"11":{}},"tags":{}}],["llm",{"_index":6,"title":{"39":{}},"content":{"9":{},"40":{}},"tags":{}}],["llvm/mlir",{"_index":59,"title":{},"content":{"9":{}},"tags":{}}],["llvm::stringref",{"_index":199,"title":{},"content":{"25":{}},"tags":{}}],["llvm并没有提供类似usd那种生成格式的机制，那是因为llvm只有一种ir，所以写成一种固定的格式即可，过去的编译流程基本上都比较简单、固定。但是随着现代深度学习编译器的进展，由于深度学习有着相对比较特定的数据表述，各个公司内部都有开发一些特定的编译流程，它是比一般的llvm",{"_index":173,"title":{},"content":{"25":{}},"tags":{}}],["longer",{"_index":182,"title":{},"content":{"25":{}},"tags":{}}],["lot",{"_index":236,"title":{},"content":{"27":{}},"tags":{}}],["lua，它们通常不能直接访问内存，开发者所能操作的都是封装在一定类型和对象中，现代大多数编程语言都按照类型进行寻址，也即是类型系统本身基本上可以保证程序的安全，如果你的源代码不知道一个对象的地址，你就不可能访问到它。然而实际现在大多数编程语言都提供静态变量或者全局常量之类的方式，这种方式使得内存环境中的其他代码可以获取到这些共享信息，从而对软件进行破坏。为了避免这种问题，roblox就对lua进行了改造，叫做luau，比如通过禁止全局变量，以及禁止一些能够访问全局变量的库函数等等机制来实现一种沙盒安全，这样第三方开发者开发的代码就可以放心地在roblox",{"_index":109,"title":{},"content":{"23":{}},"tags":{}}],["messag",{"_index":229,"title":{},"content":{"27":{}},"tags":{}}],["method",{"_index":232,"title":{},"content":{"27":{}},"tags":{}}],["misunderstood",{"_index":227,"title":{},"content":{"27":{}},"tags":{}}],["mit",{"_index":66,"title":{},"content":{"11":{}},"tags":{}}],["mlir::dialect",{"_index":192,"title":{},"content":{"25":{}},"tags":{}}],["mlir::dialect(\"toy",{"_index":195,"title":{},"content":{"25":{}},"tags":{}}],["mlir::typeid::get<toydialect",{"_index":196,"title":{},"content":{"25":{}},"tags":{}}],["model",{"_index":4,"title":{"39":{}},"content":{"40":{}},"tags":{}}],["modular",{"_index":99,"title":{},"content":{"22":{},"25":{}},"tags":{}}],["month",{"_index":25,"title":{},"content":{"40":{}},"tags":{}}],["more",{"_index":144,"title":{},"content":{"23":{},"27":{}},"tags":{}}],["much",{"_index":181,"title":{},"content":{"25":{},"27":{}},"tags":{}}],["multi",{"_index":98,"title":{},"content":{"22":{}},"tags":{}}],["naci存在较大的运行时性能，因为它的机制一般对第三方代码不做太多要求，假设其按照一般的方法进行开发，然后仅仅在调用这些方法的时候为其分配独立的内存区域进行隔离，它基本上是用软件模拟操作系统的内存隔离机制，比如每次切换都需要保存大量的状态和寄存器地址等等。为了减少这种隔离导致的代价，web",{"_index":118,"title":{},"content":{"23":{}},"tags":{}}],["name",{"_index":184,"title":{},"content":{"25":{}},"tags":{}}],["namespac",{"_index":183,"title":{},"content":{"25":{}},"tags":{}}],["new",{"_index":2,"title":{"39":{}},"content":{"40":{}},"tags":{}}],["nicer",{"_index":237,"title":{},"content":{"27":{}},"tags":{}}],["notion",{"_index":223,"title":{},"content":{"27":{}},"tags":{}}],["object",{"_index":224,"title":{},"content":{"27":{}},"tags":{}}],["oct",{"_index":14,"title":{},"content":{"40":{}},"tags":{}}],["oop",{"_index":216,"title":{},"content":{"27":{}},"tags":{}}],["open sourc",{"_index":28,"title":{},"content":{},"tags":{"5":{}}}],["openai的plugin系统中，每个plugin是一个特定的应用，尽管这种描述好的调用逻辑使得chatgpt可以正确地调用各个应用软件的接口，但如果你的使用本身是要在多个plugin之间建立一些比较复杂的逻辑和流程，或者说我们想构造任意的应用程序，把每个plugin接口当作组件，这就又会回到让ai",{"_index":276,"title":{},"content":{"32":{}},"tags":{}}],["orient",{"_index":225,"title":{},"content":{"27":{},"34":{}},"tags":{}}],["origin",{"_index":238,"title":{},"content":{"27":{}},"tags":{}}],["overemphas",{"_index":231,"title":{},"content":{"27":{}},"tags":{}}],["perhap",{"_index":254,"title":{},"content":{"27":{}},"tags":{}}],["peyton",{"_index":136,"title":{},"content":{"23":{}},"tags":{}}],["pixar",{"_index":169,"title":{},"content":{"25":{}},"tags":{}}],["plugin系统，r",{"_index":277,"title":{},"content":{"32":{}},"tags":{}}],["point",{"_index":252,"title":{},"content":{"27":{}},"tags":{}}],["polymorph",{"_index":250,"title":{},"content":{"27":{}},"tags":{}}],["prematur",{"_index":256,"title":{},"content":{"27":{}},"tags":{}}],["product",{"_index":141,"title":{},"content":{"23":{}},"tags":{}}],["program",{"_index":3,"title":{"39":{}},"content":{"23":{},"27":{},"40":{}},"tags":{}}],["protocol",{"_index":159,"title":{},"content":{"23":{}},"tags":{}}],["protocolsand",{"_index":148,"title":{},"content":{"23":{}},"tags":{}}],["public",{"_index":191,"title":{},"content":{"25":{}},"tags":{}}],["pure",{"_index":251,"title":{},"content":{"27":{}},"tags":{}}],["qin",{"_index":12,"title":{},"content":{"40":{}},"tags":{}}],["reaction",{"_index":230,"title":{},"content":{"27":{}},"tags":{}}],["realiti",{"_index":16,"title":{"5":{},"7":{},"20":{},"21":{},"22":{},"36":{}},"content":{"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"16":{},"19":{},"20":{},"21":{},"22":{},"23":{},"25":{},"26":{},"28":{},"30":{},"31":{},"36":{},"40":{}},"tags":{}}],["reality world",{"_index":8,"title":{},"content":{},"tags":{"5":{},"19":{},"39":{}}}],["refer",{"_index":27,"title":{"41":{}},"content":{},"tags":{}}],["resid",{"_index":188,"title":{},"content":{"25":{}},"tags":{}}],["respond",{"_index":242,"title":{},"content":{"27":{}},"tags":{}}],["return",{"_index":201,"title":{},"content":{"25":{}},"tags":{}}],["rust",{"_index":60,"title":{"33":{}},"content":{"9":{},"33":{}},"tags":{}}],["rust对我而言最大的好处和体验是，迭代速度比较快，这符合我现在的需求。只要代码编译通过，几乎不会花时间去排查一些比较诡异，甚至需要小心翼翼地断步调试才能发现问题的bug，一般有bug就基本上大部分还是逻辑问题，而且rust",{"_index":282,"title":{},"content":{"33":{}},"tags":{}}],["rust进行开发，开始也是有些不习惯，但是在逐步学习和使用过程中感受到了rust",{"_index":281,"title":{},"content":{"33":{}},"tags":{}}],["say",{"_index":257,"title":{},"content":{"27":{}},"tags":{}}],["scratch",{"_index":261,"title":{},"content":{"28":{}},"tags":{}}],["self",{"_index":94,"title":{},"content":{"22":{}},"tags":{}}],["send",{"_index":243,"title":{},"content":{"27":{}},"tags":{}}],["sent",{"_index":241,"title":{},"content":{"27":{}},"tags":{}}],["sfi",{"_index":116,"title":{},"content":{"23":{}},"tags":{}}],["smalltalk",{"_index":239,"title":{},"content":{"27":{}},"tags":{}}],["softwar",{"_index":111,"title":{},"content":{"23":{}},"tags":{}}],["sql",{"_index":154,"title":{},"content":{"23":{}},"tags":{}}],["state",{"_index":215,"title":{},"content":{"27":{}},"tags":{}}],["static",{"_index":198,"title":{},"content":{"25":{}},"tags":{}}],["summari",{"_index":178,"title":{},"content":{"25":{}},"tags":{}}],["sweeney的那篇演讲：https://dl.acm.org/doi/10.1145/3306307.3339844",{"_index":102,"title":{},"content":{"23":{}},"tags":{}}],["syetem（naci）使用sfi来扩展第三方c库，使得浏览器可以使用如第三方的字体，音频，xml",{"_index":117,"title":{},"content":{"23":{}},"tags":{}}],["system",{"_index":97,"title":{},"content":{"22":{},"23":{},"25":{}},"tags":{}}],["system，或者cognit",{"_index":39,"title":{},"content":{"7":{}},"tags":{}}],["t2座26",{"_index":72,"title":{},"content":{"15":{}},"tags":{}}],["talk",{"_index":235,"title":{},"content":{"27":{}},"tags":{}}],["ta代码中的逻辑跟ta",{"_index":56,"title":{},"content":{"8":{}},"tags":{}}],["thing",{"_index":222,"title":{},"content":{"27":{}},"tags":{}}],["tim",{"_index":101,"title":{},"content":{"23":{}},"tags":{}}],["tim在2019年的演讲中大量提到了标准，为了实现多个独立应用程序之间的协作，那么必然要建立大量的标准，有了这些标准，互操作就变得简单，例如《堡垒之夜》现在的creative模式实际上已经有了很多标准，比如一个物体怎么摆放在环境中，并可以被其他玩家交互，这都是可以由device来定义的，这实际上就是一种形式的标准或者接口，后续基于vers",{"_index":160,"title":{},"content":{"23":{}},"tags":{}}],["tim认为这样的目标大概可能需要10年才能完成，但epic会朝着这个目标逐步逼近。epic的路线大概是几步：首先将一些偏社交或者玩家的非专业游戏开发者转移到《堡垒之夜》中，这部分开发者都在《堡垒之夜》的游戏内部而不是单独使用unr",{"_index":105,"title":{},"content":{"23":{}},"tags":{}}],["titl",{"_index":20,"title":{},"content":{"40":{}},"tags":{}}],["top",{"_index":288,"title":{},"content":{"34":{}},"tags":{}}],["toy",{"_index":179,"title":{},"content":{"25":{}},"tags":{}}],["toy_dialect",{"_index":177,"title":{},"content":{"25":{}},"tags":{}}],["toydialect",{"_index":190,"title":{},"content":{"25":{}},"tags":{}}],["toydialect(mlir::mlircontext",{"_index":193,"title":{},"content":{"25":{}},"tags":{}}],["two",{"_index":143,"title":{},"content":{"23":{}},"tags":{}}],["under",{"_index":233,"title":{},"content":{"27":{}},"tags":{}}],["url",{"_index":26,"title":{},"content":{"40":{}},"tags":{}}],["us",{"_index":145,"title":{},"content":{"23":{}},"tags":{}}],["usd",{"_index":58,"title":{},"content":{"9":{},"25":{}},"tags":{}}],["usd/llvm/mlir",{"_index":54,"title":{},"content":{"8":{}},"tags":{}}],["usd格式，尽管从表面看usd跟其他的标准类似只是一种数据格式或协议，但实际上它远远不止如此，它还是一种非常易于扩展的格式，它提供了一种plugin的机制使得开发者可以对格式做很多定制和增强功能，并且可以通过一个schema定义来生成自己定义格式的解析代码，然后通过plugin来调用自定义的格式解析和代码。这就好比它帮助你编写了文本格式的编解码，尽管看起来不过如此，看起来只是一种模板化的代码生成机制，但是当这种解析代码能够与逻辑高度融为一体的时候，事情的本质发生了一些变化，试想使用usd你的流程是这样：首先针对一种特定数据自定义一个schema，然后调用usd的api帮助我们生成相关的解析代码，如果这段解析代码能够以某种机制被其他开发者拿到，那么ta的程序就能够轻松解析我们的api。当然如果你修改了schema，仍然需要对方进行同步，但是这种流程本质上改变了我们的思路：过去我们是先定义内部做法，再与外界沟通，这就容易带来一些复杂度和碎片化；现在是我们先想着自己就是基于一种标准在开发，然后需要的时候就能够很方便地暴露出去，这里usd充当了一种协调的机制并为这种协调的机制提供了一些辅助功能。苹果的usdz格式以及英伟达的mdl都是基于usd",{"_index":170,"title":{},"content":{"25":{}},"tags":{}}],["v0.1.0版本的开发，它实现了realiti",{"_index":82,"title":{},"content":{"19":{}},"tags":{}}],["vers",{"_index":139,"title":{},"content":{"23":{}},"tags":{}}],["view",{"_index":253,"title":{},"content":{"27":{}},"tags":{}}],["void",{"_index":202,"title":{},"content":{"25":{}},"tags":{}}],["web",{"_index":34,"title":{},"content":{"7":{},"9":{},"10":{},"23":{},"24":{}},"tags":{}}],["work",{"_index":142,"title":{},"content":{"23":{}},"tags":{}}],["world",{"_index":17,"title":{"5":{},"7":{},"20":{},"22":{},"36":{}},"content":{"6":{},"7":{},"8":{},"10":{},"12":{},"16":{},"19":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"28":{},"30":{},"36":{},"40":{}},"tags":{}}],["world创业的事情，然而很遗憾的是一直没有分享太多关于它的信息。一来是因为它所涉及的技术有比较多的创新尝试，在还没有真正的技术开发实践之前容易引起比较多的争议；二来是因为去年得到了一些大资本极大的兴趣，因此我想着一鼓作气等拿到投资之后再公布一些信息。当然因为各种原因到现在也还没有谈定投资，所以近几个月我就将全部精力用于开发了。经过几个月的艰苦奋战，今天终于有机会可以给大家分享一些我的想法，以及这一年的探索过程。当然real",{"_index":83,"title":{},"content":{"19":{}},"tags":{}}],["world在这两个方面都做了一些创新尝试，使得开发者既可以像传统的局部变量一样去方面其它对象的数据，又可以像erlang",{"_index":260,"title":{},"content":{"27":{}},"tags":{}}],["world已经慎重决定由创业项目转为纯开源项目，也就是说它后面将不会有一个创业公司实体来运营，它会真正依靠社区及其组织进行发展，就像bevi",{"_index":29,"title":{},"content":{"6":{}},"tags":{}}],["world希望能够通过一些创新探索，构建起一个更好的互操作平台，使得上面的应用之间可以更好地协作，它看起来像是基于osi",{"_index":205,"title":{},"content":{"25":{}},"tags":{}}],["world当作输入，然后按照程序构造的逻辑去检索相应的组件并组合构造，这样的程序要么是构造不出来的，要么就是至少能够成功运行的，而剩下的正确性问题就取决于组件描述的准确性和ai",{"_index":279,"title":{},"content":{"32":{}},"tags":{}}],["world所有的源代码及其技术架构思路均采用非常宽松的mit",{"_index":65,"title":{},"content":{"11":{}},"tags":{}}],["world技术上的复杂性，也就是为什么我们思考的是面向未来5~10",{"_index":36,"title":{},"content":{"7":{}},"tags":{}}],["world提供的不是一个单个plugin，而是一种通用编程能力，它可以理解为是一种面向ai的编程系统，因为ai发出的文本序列，会被r",{"_index":278,"title":{},"content":{"32":{}},"tags":{}}],["world是一个像区块链类似的分布式系统；同时，即使是在源代码的翻译解释部分，real",{"_index":87,"title":{},"content":{"21":{}},"tags":{}}],["world是一个面向具有“未来特征”应用的开发框架和运行时，开发框架是指它是一个用于构建应用的工具，就像你用游戏引擎可以构建游戏程序，只不过现在它还不支持图形和ui显示，但是在将来它应该可以比较简单地集成一些渲染引擎或者ui",{"_index":33,"title":{},"content":{"7":{}},"tags":{}}],["world是什么。一方面是real",{"_index":31,"title":{},"content":{"6":{}},"tags":{}}],["world涉及到很多技术思维，甚至包含一些创新尝试，我相信参与这个项目本身肯定会学到很多知识。但现阶段还不能正式公布，我们预计会在6",{"_index":293,"title":{},"content":{"36":{}},"tags":{}}],["world的一切，包括它的为什么这么思考，具体的架构设计，以及一个具体的代码实现和demo",{"_index":46,"title":{},"content":{"8":{}},"tags":{}}],["world的架构，那个时候的热点还是元宇宙。那个时候，由于没有现在大模型的这种能力，我们当然也没有主要去思考ai方面的，但是从我们自己的设计思路上，我和我们公司的2号员工，在2020年的时候就思考和讨论将来怎样让ai",{"_index":267,"title":{},"content":{"30":{}},"tags":{}}],["world的核心是一套运行时，可以部分理解为一个虚拟机，但是与传统单纯解释源代码的编程语言的虚拟机相比，它包含一些源代码解释翻译之外的功能，例如权限验证、沙盒安全与互操作、分布式内容分发与同步、组件的依赖管理和动态加载等等，因此可以理解为real",{"_index":86,"title":{},"content":{"21":{}},"tags":{}}],["world的理念甚至是相反的，从名字就可以看出，我选择reality这个词，是希望我们能够引导用户更多关注现实，r",{"_index":92,"title":{},"content":{"22":{}},"tags":{}}],["world的目标是希望通过提供更简化、更具互操作性的一些编程体验，使更多的人能够随心所欲地表达ta",{"_index":93,"title":{},"content":{"22":{}},"tags":{}}],["world的目标跟tim的一些描述和愿景是相似的，但也存在比较大的根本不同，我首先描述跟tim演讲的一些关系和逻辑，然后再介绍我们的思考，通过这些问题就可以比较自然地理解r",{"_index":103,"title":{},"content":{"23":{}},"tags":{}}],["world的目标，是要构建一种新的程序组织和构造的方法，所以最基础的问题就是为什么要构建一种新的方法？我们已经有非常成熟的各种体系，在传统的流程中，比如要构建一个应用程序，首先基本的各种编程语言如c++、rust、python、javascript、c#、go等基本上解决了大部分的逻辑组织和表达的问题，剩下的主要就是在显示层又会有不同的选择，比如要想实现3d的图形界面，至少得选择一个游戏引擎或者其它具有3d渲染能力的组件或者框架，2d的界面则有更多各式各样的选择，比如ios和android都有原生的ui交互框架，也有其它一些如react、flutter等跨平台或者基于web",{"_index":50,"title":{},"content":{"8":{}},"tags":{}}],["world的第二个核心关注点和基础就是在这两个方面做出了一些新的探索。世界上只有大约不到0.5%的人是会编写代码的，约3000万左右，所以数字化表达的潜力还远远没有被发挥出来。如果我们将这个数字提升到5亿~10",{"_index":206,"title":{},"content":{"26":{}},"tags":{}}],["world的设计过程中，为了要让普遍用户可以构造程序，将程序的整个构造过程做了多处调整，从类型定义，数据初始化和管理，互操作性，程序结构的推演，线程隔离等等。其中还有一个重要的方面就是组合性，这种组合性使得两个相关的组件，不需要用户手动添加任何参数或者输入输出的设置，就可以正确地构造程序，例如如下的这段复杂的逻辑，整个graph",{"_index":272,"title":{},"content":{"31":{}},"tags":{}}],["world还处于非常早期和原型的阶段，我预计还会再迭代几个版本到v0.5.0左右才会开始正式公布或者内测，所以这里我也不会涉及太多技术细节，但是我可以分享我们想解决什么问题，以及为什么要解决这些问题，并大概说明一些思路，这样大家应该能够初步了解real",{"_index":84,"title":{},"content":{"19":{}},"tags":{}}],["world：是这种应用的一个模拟器，任意一个基于cogin",{"_index":45,"title":{},"content":{"7":{}},"tags":{}}],["wrote",{"_index":220,"title":{},"content":{"27":{}},"tags":{}}],["x",{"_index":79,"title":{},"content":{"16":{}},"tags":{}}],["xml",{"_index":153,"title":{},"content":{"23":{}},"tags":{}}],["year",{"_index":24,"title":{},"content":{"40":{}},"tags":{}}]],"pipeline":["stemmer"]}}